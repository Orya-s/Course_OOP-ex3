from unittest import TestCase

from DiGraph import DiGraph, NodeData


class TestNodeData(TestCase):
    def test_get_ni(self):
        g = DiGraph()
        g.add_node(0)
        g.add_node(1)
        g.add_node(2)
        g.add_node(3)
        g.add_node(4)
        g.add_node(5)
        g.add_node(6)
        self.assertEqual({}, g.getNode(1).getNi())
        g.add_edge(1, 2, 1)
        g.add_edge(2, 1, 1)
        self.assertDictEqual(({2: g.getNode(2)}), g.getNode(1).getNi())
        g.add_edge(2, 3, 1.5)
        g.add_edge(2, 5, 3)
        g.add_edge(2, 6, 2.8)
        self.assertDictEqual(({1: g.getNode(1), 3: g.getNode(3), 5: g.getNode(5), 6: g.getNode(6)}),
                             g.getNode(2).getNi())
        g.remove_edge(2, 3)
        self.assertDictEqual(({1: g.getNode(1), 5: g.getNode(5), 6: g.getNode(6)}), g.getNode(2).getNi())


    def test_get_parents(self):
        g = DiGraph()
        g.add_node(0)
        g.add_node(1)
        g.add_node(2)
        g.add_node(3)
        g.add_node(4)
        g.add_node(5)
        g.add_node(6)
        self.assertDictEqual({}, g.getNode(1).getParents())
        g.add_edge(2, 1, 1)
        g.add_edge(3, 1, 1)
        g.add_edge(4, 1, 3)
        g.add_edge(5, 1, 2.8)
        g.add_edge(6, 1, 1.5)
        self.assertDictEqual({2: g.getNode(2), 3: g.getNode(3), 4: g.getNode(4), 5: g.getNode(5), 6: g.getNode(6)},
                             g.getNode(1).getParents())
        g.remove_edge(5, 1)
        g.remove_edge(3, 1)
        self.assertDictEqual({2: g.getNode(2), 4: g.getNode(4), 6: g.getNode(6)}, g.getNode(1).getParents())

    def test_has_ni(self):
        g = DiGraph()
        g.add_node(1)
        g.add_node(2)
        self.assertFalse(g.getNode(1).hasNi(2))
        g.add_edge(2, 1, 1)
        self.assertFalse(g.getNode(1).hasNi(2))
        self.assertTrue(g.getNode(2).hasNi(1))
        g.remove_node(1)
        self.assertFalse(g.getNode(2).hasNi(1))

    def test_has_parent(self):
        g = DiGraph()
        g.add_node(1)
        g.add_node(2)
        self.assertFalse(g.getNode(1).hasParent(2))
        g.add_edge(2, 1, 1)
        self.assertFalse(g.getNode(2).hasParent(1))
        self.assertTrue(g.getNode(1).hasParent(2))
        g.remove_node(1)
        g.add_node(1)
        self.assertFalse(g.getNode(1).hasParent(2))


class TestDiGraph(TestCase):
    def test_get_node(self):
        g = DiGraph()
        g.add_node(1)
        g.add_node(2)
        self.assertEqual(1, g.getNode(1).id)
        self.assertEqual(g.nodes.get(2), g.getNode(2))
        self.assertIsNone(g.getNode(3))

    def test_v_size(self):
        g = DiGraph()
        self.assertEqual(0, g.v_size())
        g.add_node(0)
        g.add_node(1)
        g.add_node(2)
        g.add_node(3)
        g.add_node(4)
        g.add_node(5)
        g.add_node(6)
        self.assertEqual(7, g.v_size())
        g.remove_node(0)
        g.remove_node(1)
        self.assertEqual(5, g.v_size())

    def test_e_size(self):
        g = DiGraph()
        self.assertEqual(0, g.e_size())
        g.add_node(0)
        g.add_node(1)
        g.add_node(2)
        g.add_node(3)
        g.add_node(4)
        g.add_node(5)
        g.add_edge(0, 1, 0.5)
        g.add_edge(0, 1, 0.5)
        self.assertEqual(1, g.e_size())
        g.add_edge(1, 0, 0.5)
        self.assertEqual(2, g.e_size())
        g.remove_node(0)
        self.assertEqual(0, g.e_size())
        g.add_edge(0, 1, 0.5)
        self.assertEqual(0, g.e_size())
        g.add_edge(2, 1, 1.5)
        g.add_edge(2, 3, 2.5)
        g.add_edge(4, 1, 1.5)
        g.add_edge(5, 3, 3.5)
        self.assertEqual(4, g.e_size())

    def test_get_all_v(self):
        g = DiGraph()
        g.add_node(0)
        g.add_node(1)
        g.add_node(2)
        self.assertDictEqual({0: g.getNode(0), 1: g.getNode(1), 2: g.getNode(2)}, g.get_all_v())

    def test_all_in_edges_of_node(self):
        g = DiGraph()
        g.add_node(0)
        g.add_node(1)
        g.add_node(2)
        g.add_node(3)
        g.add_edge(1, 0,  0.5)
        g.add_edge(1, 0, 0.5)
        g.add_edge(2, 0, 1.5)
        g.add_edge(3, 0, 2.5)
        g.add_edge(4, 0, 0.5)
        self.assertDictEqual({1: 0.5, 2: 1.5, 3: 2.5},
                             g.all_in_edges_of_node(0))

    def test_all_out_edges_of_node(self):
        g = DiGraph()
        g.add_node(0)
        g.add_node(1)
        g.add_node(2)
        g.add_node(3)
        g.add_edge(0, 1, 0.5)
        g.add_edge(0, 1, 0.5)
        g.add_edge(0, 2, 1.5)
        g.add_edge(0, 3, 2.5)
        g.add_edge(0, 4, 0.5)
        self.assertDictEqual({1: 0.5, 2: 1.5, 3: 2.5},
                             g.all_out_edges_of_node(0))
        # self.assertDictEqual({0: (1, 0.5), 1: (2, 1.5), 2: (3, 2.5)},
        #                      g.all_in_edges_of_node(0))

    def test_get_mc(self):
        g = DiGraph()
        g.add_node(0)
        g.add_node(1)
        g.add_node(2)
        self.assertEqual(3, g.get_mc())  # #
        g.add_edge(0, 1, 0.5)
        g.add_edge(0, 1, 0.5)
        self.assertEqual(4, g.get_mc())
        g.remove_node(0)
        self.assertEqual(5, g.get_mc())
        g.add_edge(0, 1, 0.5)
        self.assertEqual(5, g.get_mc())
        g.add_edge(2, 1, 1.5)
        g.add_edge(2, 3, 2.5)
        self.assertEqual(6, g.get_mc())

    def test_add_edge(self):
        g = DiGraph()
        g.add_node(0)
        g.add_node(1)
        g.add_node(2)
        g.add_node(3)
        g.add_edge(0, 1, 0.5)
        g.add_edge(0, 1, 0.5)
        self.assertEqual(1, g.e_size())
        g.add_edge(1, 0, 0.5)
        self.assertEqual(2, g.e_size())
        g.remove_node(0)
        self.assertEqual(0, g.e_size())
        g.add_edge(0, 1, 0.5)
        self.assertEqual(0, g.e_size())

    def test_add_node(self):
        g = DiGraph()
        g.add_node(0)
        g.add_node(1)
        g.add_node(2)
        g.add_node(3)
        g.add_node(4)
        g.add_node(5)
        g.add_node(6)
        g.add_node(6)
        g.add_node(6)
        self.assertEqual(7, g.v_size())
        g.remove_node(0)
        g.remove_node(1)
        self.assertEqual(5, g.v_size())

    def test_remove_node(self):
        g = DiGraph()
        g.add_node(0)
        g.add_node(1)
        g.add_node(2)
        g.add_node(3)
        g.add_node(4)
        self.assertEqual(5, g.v_size())
        g.remove_node(0)
        g.remove_node(1)
        self.assertEqual(3, g.v_size())
        g.remove_node(1)
        g.remove_node(1)
        self.assertEqual(3, g.v_size())

    def test_remove_edge(self):
        g = DiGraph()
        g.add_node(0)
        g.add_node(1)
        g.add_node(2)
        g.add_node(3)
        g.add_edge(0, 1, 0.5)
        g.add_edge(0, 2, 1.5)
        g.add_edge(0, 3, 2.5)
        self.assertEqual(3, g.e_size())
        g.remove_edge(0, 1)
        g.remove_edge(0, 1)
        self.assertEqual(2, g.e_size())
